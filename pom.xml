<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.imgarena</groupId>
    <artifactId>tennis-matches-service</artifactId>
    <version>1.0-SNAPSHOT</version>


    <properties>
        <java.version>11</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <jacoco.outputDirectory>${project.build.directory}/test-coverage</jacoco.outputDirectory>
        <jacoco.agent.destFile>${jacoco.outputDirectory}/jacoco.exec</jacoco.agent.destFile>
    </properties>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.4.RELEASE</version>
    </parent>

    <build>
        <!-- We need to override the testResources so we can also include IT resources. Unfortunately, this means
        we need to explicitly add unit test resources as well, as this overrides the parent pom's one -->
        <testResources>
            <testResource>
                <!-- Unit test resources -->
                <directory>src/test/resources</directory>
            </testResource>
            <testResource>
                <!-- Integration test resources -->
                <directory>src/it/resources</directory>
            </testResource>
        </testResources>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <!--
                    This is needed in order to force Maven to use our version of Java even if an newer or older
                    version is set as the default Java on the machine running the tests.
                -->
                <configuration>
                    <executable>${JAVA_11_HOME}/bin/javac</executable>
                    <fork>true</fork>
                </configuration>
            </plugin>

            <!-- plugin for unit tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.1</version>
                <configuration>
                    <!--
                        This is needed in order to force Maven to use our version of Java even if an newer or older
                         version is set as the default Java on the machine running the tests.
                    -->
                    <jvm>${JAVA_11_HOME}/bin/java</jvm>
                    <!--
                        If you're thinking why not add an exclude rule that excludes all tests under 'it' folder,
                        then let me tell you this has been tried already and failed. The reason is Maven adds
                        all the test sources under one folder, 'test-classes', and then the exclude filters are applied.
                        This means filters can only be applied starting from the first package.
                    -->
                    <excludedGroups>com.imgarena.tennis_matches.IntegrationCategory</excludedGroups>
                </configuration>
            </plugin>

            <!-- plugins for integration tests -->
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.22.1</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--
                        This is needed in order to force Maven to use Java 11 even if an older version is set as the
                        default Java on the machine running the tests.
                    -->
                    <jvm>${JAVA_11_HOME}/bin/java</jvm>
                    <!--
                        Test that are annotated with '@Category(IntegrationCategory.class)' are considered integration
                        tests and will run after all the unit tests have been executed.
                    -->
                    <includes>
                        <include>**/*.java</include>
                    </includes>
                    <groups>com.imgarena.tennis_matches.IntegrationCategory</groups>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <id>add-it-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-test-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>src/it/java</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- plugins for code quality analysis -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.4</version>
                <executions>
                    <!-- Unit test coverage config. -->
                    <execution>
                        <id>unit-test-jacoco-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <destFile>${jacoco.agent.destFile}</destFile>
                        </configuration>
                    </execution>

                    <!-- Integration test coverage config. -->
                    <execution>
                        <id>integration-test-jacoco-agent</id>
                        <goals>
                            <goal>prepare-agent-integration</goal>
                        </goals>
                        <configuration>
                            <!-- We want to append to the unit test results -->
                            <destFile>${jacoco.agent.destFile}</destFile>
                            <append>true</append>
                        </configuration>
                    </execution>

                    <!-- Prepare the report for the combined unit & integration tests coverage. -->
                    <execution>
                        <id>generate-test-coverage-report</id>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <dataFile>${jacoco.agent.destFile}</dataFile>
                            <outputDirectory>${jacoco.outputDirectory}/all-tests-report</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <excludes>
                        <exclude>**/*Config.*</exclude>
                        <exclude>com/imgarena/tennis_matches/TennisMatchesService.class</exclude>
                    </excludes>
                </configuration>
            </plugin>

            <!-- plugin to create executable 'fat' JAR and run Spring Boot applications -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>

    </build>

    <dependencies>
        <!-- Start of Spring Boot starters -->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- End of Spring Boot starters -->

        <dependency>
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
            <version>2.5.1</version>
        </dependency>

        <!-- Test dependencies -->
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>3.15.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>3.3.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-test-autoconfigure</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>net.javacrumbs.json-unit</groupId>
            <artifactId>json-unit-fluent</artifactId>
            <version>2.13.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>